#!/usr/bin/ruby 

require 'rubygems'
require 'yaml'
require 'stomp'
require 'syslog'
require 'optparse'
require 'uri'
require 'net/http'

 
options = {}
 
optparse = OptionParser.new do|opts|
  opts.banner = "Usage: stomp-jenkins.rb [options]"
 
  options[:debug] = false
  opts.on( '-d', '--debug', 'Much output, do not detach' ) do
    options[:debug] = true
  end

  options[:configfile] = "/etc/stomp-jenkins/stomp-jenkins.yaml"
    opts.on( '-c', '--config FILE', 'Config is FILE' ) do|file|
      options[:configfile] = file
    end

  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
        exit
  end
end

optparse.parse!


if !options[:debug]
  pid = Process.fork
else
  pid = nil
  puts "DEBUG"
  puts "Config is #{options[:configfile]}"
end

if pid.nil?
  Signal.trap("TERM") do
    Syslog.info("Terminating.")
    exit
  end

  Signal.trap("HUP") do
    yconfig = YAML.load_file(options[:configfile])
    Syslog.info("Re-read #{options[:configfile]}")
  end

  yconfig = YAML.load_file(options[:configfile])

  puts YAML.dump(yconfig) if options[:debug]

  Syslog.open('stomp-jenkins', Syslog::LOG_CONS, Syslog::LOG_DAEMON)

  stompconnector = yconfig["rserver"] + "?" + yconfig["stomp-options"]
  listen_topic = yconfig["listen-topic"]
  report_topic = yconfig["report-topic"]
  jenkins_url  = yconfig["jenkins-url"]
  jenkins_projects = yconfig["jenkins-projects"]

  client = Stomp::Client.new(stompconnector)

  if client
    Syslog.info("Connected to #{listen_topic}")
    puts "Connected to #{listen_topic}" if options[:debug]

    client.subscribe "/topic/#{listen_topic}" do |message|
      if message.body == "\n"
        puts "Bodge-beat frame" if options[:debug]
        next
      else
        svnproject = ""
        reponame = ""
        jenkins_job = ""
        jenkins_ticket = ""

        if options[:debug]
          puts "Subject: #{message.headers["subject"]}"
          puts "Message-ID: #{message.headers["message-id"]}"
          puts "--"
          puts message.body
          puts "--"
        end

        message.body.each do |mline|
          mkey,mval = mline.split(":",2)

          reponame = mval.strip if mkey == "repo"
          svnproject = mval.strip if mkey == "Project"
        end
      end

      jproject = jenkins_projects[reponame]

      if jproject.nil?
        puts "Not our repo: #{reponame}" if options[:debug]
        next
      end

      if svnproject
        sproject = jproject[svnproject]
        if sproject.nil?
          puts "Not our SVN project: #{svnproject}" if options[:debug]
          next
        else
          jenkins_job = sproject['project']
          jenkins_ticket = sproject['ticket']
        end
        puts sproject.inspect if options[:debug]
      else
        jenkins_job = jproject['project']
        jenkins_ticket = jproject['ticket']
      end

      jenkins = jenkins_url + "/job/" + jenkins_job + "/build?token=" + jenkins_ticket
      uri = URI.parse(jenkins)
      http = Net::HTTP.new(uri.host, uri.port)
      response = http.request(Net::HTTP::Get.new(uri.request_uri))

      if options[:debug]
        puts "Repo/project/ticket: #{reponame}/#{jenkins_job}/#{jenkins_ticket}"
        puts "URI: #{jenkins}"
        puts "Response: #{response}"
        puts "Requested Jenkins build: #{message.headers["subject"]}"
      end
  
      jenkins_syslog = jenkins_job.gsub("%20","_")
      eventdetail = "Requested Jenkins build: #{message.headers["subject"]} / #{jenkins_syslog}"
      Syslog.info(eventdetail)
      client.publish("/topic/#{report_topic}",eventdetail, {:subject => "Talking to eventbot"})
    end

    client.join
    client.close
  end

else
  Process.detach(pid)
end
